<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\AirBox.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\AirBox.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Mar 29 10:33:09 2021
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; $Super$$main &rArr; zigbee_uart_service &rArr; data_handle &rArr; mcu_ota_fw_request_event &rArr; ota_fw_data_handle &rArr; mcu_ota_fw_request &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[25]">CLKTRIM_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[a]">DMAC_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[24]">FLASH_RAM_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[12]">I2C0_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[13]">I2C1_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[23]">LCD_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[17]">LPTIM_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[e]">LPUART0_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[f]">LPUART1_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[22]">LVD_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1b]">PCA_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1f]">PCNT_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[6]">PORTA_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[7]">PORTB_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[8]">PORTC_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[9]">PORTD_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1d]">RTC_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[10]">SPI0_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[11]">SPI1_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_hc32l13x.o(.text) referenced from startup_hc32l13x.o(.text)
 <LI><a href="#[14]">TIM0_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[15]">TIM1_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[16]">TIM2_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[b]">TIM3_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[18]">TIM4_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[19]">TIM5_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1a]">TIM6_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[c]">UART0_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[d]">UART1_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[20]">VC0_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[21]">VC1_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1c]">WDT_IRQHandler</a> from interrupts_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32l13x.o(.text)
 <LI><a href="#[29]">fputc</a> from main.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[26]">main</a> from system_hc32l13x.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(.text)
</UL>
<P><STRONG><a name="[154]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[14f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[155]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[156]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[157]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[158]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[159]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[31]"></a>LCD_WR_REG</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLCDID
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetBox
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789V_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>

<P><STRONG><a name="[32]"></a>LCD_WR_DATAX</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_DATAX
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Picture
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetBox
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteOneDot
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789V_Init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>

<P><STRONG><a name="[2c]"></a>LCD_RD_DATA</STRONG> (Thumb, 570 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLCDID
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
</UL>

<P><STRONG><a name="[30]"></a>LCD_WriteReg</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATAX
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[33]"></a>LCD_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[15a]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>LCD_WriteRAM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATAX
</UL>

<P><STRONG><a name="[15b]"></a>LCD_BGR2RGB</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>opt_delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>LCD_DisplayOn</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_DisplayOn &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[36]"></a>LCD_DisplayOff</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[37]"></a>ST7789V_Init</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ST7789V_Init &rArr; delay1ms &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATAX
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[39]"></a>LCD_WriteOneDot</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WriteOneDot &rArr; LCD_WR_DATAX
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATAX
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Part
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_rectangle
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_english
</UL>

<P><STRONG><a name="[3a]"></a>Lcd_SetBox</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Lcd_SetBox &rArr; LCD_WR_DATAX
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATAX
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Part
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_rectangle
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Picture
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_english_string
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
</UL>

<P><STRONG><a name="[3b]"></a>LCD_Draw_Point</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Draw_Point &rArr; Lcd_SetBox &rArr; LCD_WR_DATAX
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetBox
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteOneDot
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNUM
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPM
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar_CH
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TEST
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[3c]"></a>LCD_Clear</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_Clear &rArr; Lcd_SetBox &rArr; LCD_WR_DATAX
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetBox
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteOneDot
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Show_Handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemAndHum_Show_Handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Show_Handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_Show_Handler
</UL>

<P><STRONG><a name="[3d]"></a>DATAOUT</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetClrPort
</UL>

<P><STRONG><a name="[3f]"></a>getLCDID</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[41]"></a>LCD_write_english_string</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetBox
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_english
</UL>

<P><STRONG><a name="[42]"></a>LCD_Picture</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetBox
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATAX
</UL>

<P><STRONG><a name="[43]"></a>LCD_ShowChar</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
</UL>

<P><STRONG><a name="[44]"></a>LCD_TEST</STRONG> (Thumb, 84 bytes, Stack size 36 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
</UL>

<P><STRONG><a name="[45]"></a>LCD_ShowChar_CH</STRONG> (Thumb, 240 bytes, Stack size 52 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
</UL>

<P><STRONG><a name="[15d]"></a>LCD_ShowString</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>LCD_rectangle</STRONG> (Thumb, 72 bytes, Stack size 44 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetBox
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteOneDot
</UL>

<P><STRONG><a name="[47]"></a>LCD_ShowPM</STRONG> (Thumb, 232 bytes, Stack size 44 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
</UL>

<P><STRONG><a name="[48]"></a>LCD_ShowNUM</STRONG> (Thumb, 208 bytes, Stack size 44 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
</UL>

<P><STRONG><a name="[49]"></a>Clear_Part</STRONG> (Thumb, 42 bytes, Stack size 36 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Clear_Part &rArr; Lcd_SetBox &rArr; LCD_WR_DATAX
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetBox
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteOneDot
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Show_Handler
</UL>

<P><STRONG><a name="[4a]"></a>LCD_ShowPicture</STRONG> (Thumb, 152 bytes, Stack size 52 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LCD_ShowPicture &rArr; LCD_Draw_Point &rArr; Lcd_SetBox &rArr; LCD_WR_DATAX
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Show_Handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemAndHum_Show_Handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Show_Handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_Show_Handler
</UL>

<P><STRONG><a name="[4b]"></a>CO2_Show_Handler</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CO2_Show_Handler &rArr; LCD_ShowPicture &rArr; LCD_Draw_Point &rArr; Lcd_SetBox &rArr; LCD_WR_DATAX
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_Set_Status
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_Get_data
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[50]"></a>PM_Show_Handler</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = PM_Show_Handler &rArr; LCD_ShowPicture &rArr; LCD_Draw_Point &rArr; Lcd_SetBox &rArr; LCD_WR_DATAX
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Status
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_data
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Part
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[53]"></a>TemAndHum_Show_Handler</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = TemAndHum_Show_Handler &rArr; LCD_ShowPicture &rArr; LCD_Draw_Point &rArr; Lcd_SetBox &rArr; LCD_WR_DATAX
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEM_Get_data
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUM_Get_data
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[56]"></a>RTC_Show_Handler</STRONG> (Thumb, 550 bytes, Stack size 48 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[57]"></a>Net_Handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Net_Handler &rArr; LCD_ShowPicture &rArr; LCD_Draw_Point &rArr; Lcd_SetBox &rArr; LCD_WR_DATAX
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Get_State
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Part
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[59]"></a>sc09_io_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sc09_io_init &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[5d]"></a>Delay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sc09.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Receive8Bit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Respond
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_IIC_Read_Byte
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_IIC_Send_Byte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_IIC_NAck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_IIC_Ack
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_IIC_Wait_Ack
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_I2C_Stop
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteAndGetNACK
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_I2C_Start
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[5c]"></a>I2C_Start</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humiture_Single_Shot
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humiture_send_Bytes
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_From_Device
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Simple_Read_From_Device
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_To_Device
</UL>

<P><STRONG><a name="[5e]"></a>CO2_I2C_Start</STRONG> (Thumb, 116 bytes, Stack size 4 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CO2_I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_ReadBytes
</UL>

<P><STRONG><a name="[5f]"></a>SendByteAndGetNACK</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, sc09.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_From_Device
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Simple_Read_From_Device
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_To_Device
</UL>

<P><STRONG><a name="[60]"></a>I2C_Stop</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humiture_Single_Shot
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humiture_send_Bytes
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_From_Device
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Simple_Read_From_Device
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_To_Device
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>

<P><STRONG><a name="[61]"></a>IIC_Wait_Ack</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humiture_Single_Shot
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humiture_send_Bytes
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[62]"></a>CO2_I2C_Stop</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CO2_I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_ReadBytes
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_IIC_Wait_Ack
</UL>

<P><STRONG><a name="[63]"></a>CO2_IIC_Wait_Ack</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO2_IIC_Wait_Ack &rArr; CO2_I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_I2C_Stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_ReadBytes
</UL>

<P><STRONG><a name="[64]"></a>IIC_Ack</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IIC_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[65]"></a>CO2_IIC_Ack</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CO2_IIC_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_IIC_Read_Byte
</UL>

<P><STRONG><a name="[66]"></a>IIC_NAck</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[67]"></a>CO2_IIC_NAck</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CO2_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_IIC_Read_Byte
</UL>

<P><STRONG><a name="[68]"></a>IIC_Send_Byte</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humiture_Single_Shot
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humiture_send_Bytes
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[69]"></a>CO2_IIC_Send_Byte</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO2_IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_ReadBytes
</UL>

<P><STRONG><a name="[6a]"></a>IIC_Read_Byte</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humiture_Single_Shot
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[6b]"></a>CO2_IIC_Read_Byte</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CO2_IIC_Read_Byte &rArr; CO2_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_IIC_NAck
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_IIC_Ack
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_ReadBytes
</UL>

<P><STRONG><a name="[6c]"></a>I2C_Respond</STRONG> (Thumb, 138 bytes, Stack size 4 bytes, sc09.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_From_Device
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Simple_Read_From_Device
</UL>

<P><STRONG><a name="[6d]"></a>I2C_Receive8Bit</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, sc09.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_From_Device
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Simple_Read_From_Device
</UL>

<P><STRONG><a name="[15e]"></a>SC09B_Init_Function</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sc09.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>I2C_Write_To_Device</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sc09.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteAndGetNACK
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[6f]"></a>I2C_Simple_Read_From_Device</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sc09.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Receive8Bit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Respond
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteAndGetNACK
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[70]"></a>I2C_Read_From_Device</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sc09.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Receive8Bit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Respond
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteAndGetNACK
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[71]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, sc09.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[72]"></a>CO2_CRC</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CO2_CRC &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_ReadBytes
</UL>

<P><STRONG><a name="[73]"></a>CO2_ReadBytes</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CO2_ReadBytes &rArr; CO2_CRC &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_Set_data
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_CRC
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_IIC_Read_Byte
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_IIC_Send_Byte
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_IIC_Wait_Ack
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_I2C_Stop
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_I2C_Start
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[75]"></a>Humiture_send_Bytes</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Humiture_send_Bytes &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humiture_Single_Shot
</UL>

<P><STRONG><a name="[76]"></a>Humiture_Single_Shot</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Humiture_Single_Shot &rArr; delay10us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humiture_send_Bytes
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT30_Read
</UL>

<P><STRONG><a name="[78]"></a>SHT30_Read</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SHT30_Read &rArr; Humiture_Single_Shot &rArr; delay10us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEM_Set_data
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUM_Set_data
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humiture_Single_Shot
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hum_CRC_Check
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[7c]"></a>App_PM_PortInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart_pm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_PM_PortInit &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[7f]"></a>App_Uart_PMCfg</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, uart_pm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = App_Uart_PMCfg &rArr; LPUart_Init &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableIrq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[15f]"></a>Uart_Crc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, uart_pm.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>Uart_Receive_Data_Handler</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, uart_pm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart_Receive_Data_Handler &rArr; LPUart_EnableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableIrq
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[87]"></a>LpUart0_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, uart_pm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LpUart0_IRQHandler &rArr; LPUart_DisableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ReceiveData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_GetStatus
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_DisableIrq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>App_Timer0Cfg</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = App_Timer0Cfg &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode0_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode0_EnableIrq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Cnt16Set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_ARRSet
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[91]"></a>Tim0_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Tim0_IRQHandler &rArr; mcu_network_start &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_network_start
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_GetIntFlag
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>Gpio_Init_STmode</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Gpio_Init_STmode &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[97]"></a>App_UartCfg</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = App_UartCfg &rArr; Uart_Init &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DisableIrq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[9c]"></a>App_UartPortInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_UartPortInit &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[9d]"></a>User_SetRchTrim</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = User_SetRchTrim &rArr; Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCHTrim
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a0]"></a>$Super$$main</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = $Super$$main &rArr; zigbee_uart_service &rArr; data_handle &rArr; mcu_ota_fw_request_event &rArr; ota_fw_data_handle &rArr; mcu_ota_fw_request &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_service
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_protocol_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Run
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_SetRchTrim
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartPortInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init_STmode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Timer0Cfg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Receive_Data_Handler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Uart_PMCfg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PM_PortInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT30_Read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_ReadBytes
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc09_io_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemAndHum_Show_Handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Show_Handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_Show_Handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789V_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>fputc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[a5]"></a>AppUart_PrintInit</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>

<P><STRONG><a name="[a6]"></a>App_I2cPortInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>

<P><STRONG><a name="[a7]"></a>App_I2cCfg</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
</UL>

<P><STRONG><a name="[a9]"></a>I2C_MasterReadData</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetFunc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetState
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetIrq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearIrq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFunc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[b2]"></a>Uart1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart1_IRQHandler &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_input
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveData
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>CO2_Get_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, airbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_Show_Handler
</UL>

<P><STRONG><a name="[cd]"></a>CO2_Get_Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, airbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
</UL>

<P><STRONG><a name="[74]"></a>CO2_Set_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, airbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_ReadBytes
</UL>

<P><STRONG><a name="[4f]"></a>CO2_Set_Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, airbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_Show_Handler
</UL>

<P><STRONG><a name="[51]"></a>PM_Get_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, airbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Show_Handler
</UL>

<P><STRONG><a name="[cc]"></a>PM_Get_Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, airbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
</UL>

<P><STRONG><a name="[52]"></a>PM_Set_Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, airbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Show_Handler
</UL>

<P><STRONG><a name="[86]"></a>PM_Set_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, airbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Receive_Data_Handler
</UL>

<P><STRONG><a name="[b6]"></a>Updata_Zigbee_data</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, airbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
</UL>

<P><STRONG><a name="[55]"></a>TEM_Get_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, airbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemAndHum_Show_Handler
</UL>

<P><STRONG><a name="[7a]"></a>TEM_Set_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, airbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT30_Read
</UL>

<P><STRONG><a name="[54]"></a>HUM_Get_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, airbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemAndHum_Show_Handler
</UL>

<P><STRONG><a name="[7b]"></a>HUM_Set_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, airbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT30_Read
</UL>

<P><STRONG><a name="[58]"></a>Net_Get_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, airbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Handler
</UL>

<P><STRONG><a name="[d1]"></a>Net_Set_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, airbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_work_state_event
</UL>

<P><STRONG><a name="[160]"></a>hex_to_bcd</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, mcu_api.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>my_strlen</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mcu_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
</UL>

<P><STRONG><a name="[de]"></a>my_memset</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, mcu_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = my_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_ota_fw_request_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[c9]"></a>my_memcpy</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, mcu_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_fw_data_handle
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_write_rtctime
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_buffer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_service
</UL>

<P><STRONG><a name="[161]"></a>my_strcpy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mcu_api.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>my_strcmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mcu_api.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>int_to_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mcu_api.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>byte_to_int</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mcu_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_timestamp_to_time
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_value
</UL>

<P><STRONG><a name="[b7]"></a>mcu_dp_bool_update</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mcu_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
</UL>

<P><STRONG><a name="[ba]"></a>mcu_dp_enum_update</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mcu_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mcu_dp_enum_update &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
</UL>

<P><STRONG><a name="[bb]"></a>mcu_dp_bitmap_update</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, mcu_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
</UL>

<P><STRONG><a name="[bc]"></a>mcu_dp_fault_update</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, mcu_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
</UL>

<P><STRONG><a name="[bd]"></a>mcu_dp_raw_update</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, mcu_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_buffer
</UL>

<P><STRONG><a name="[bf]"></a>mcu_dp_string_update</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, mcu_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_buffer
</UL>

<P><STRONG><a name="[c0]"></a>mcu_dp_value_update</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mcu_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mcu_dp_value_update &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
</UL>

<P><STRONG><a name="[164]"></a>mcu_get_dp_download_bool</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu_api.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>mcu_get_dp_download_enum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu_api.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>mcu_get_dp_download_value</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mcu_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_to_int
</UL>

<P><STRONG><a name="[c3]"></a>mcu_start_zigbee_test</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mcu_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
</UL>

<P><STRONG><a name="[c4]"></a>mcu_reset_zigbee</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mcu_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
</UL>

<P><STRONG><a name="[93]"></a>mcu_network_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mcu_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mcu_network_start &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>uart_receive_input</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, mcu_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>zigbee_protocol_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mcu_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c5]"></a>Queue_Read_Byte</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mcu_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_service
</UL>

<P><STRONG><a name="[c6]"></a>with_data_rxbuff</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mcu_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_service
</UL>

<P><STRONG><a name="[a3]"></a>zigbee_uart_service</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, mcu_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = zigbee_uart_service &rArr; data_handle &rArr; mcu_ota_fw_request_event &rArr; ota_fw_data_handle &rArr; mcu_ota_fw_request &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check_sum
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;with_data_rxbuff
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Read_Byte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ca]"></a>uart_transmit_output</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_data
</UL>

<P><STRONG><a name="[a4]"></a>all_data_update</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = all_data_update &rArr; mcu_dp_value_update &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Status
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_Get_Status
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEM_Get_data
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_data
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUM_Get_data
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_Get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Zigbee_data
</UL>

<P><STRONG><a name="[ce]"></a>mcu_write_rtctime</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mcu_write_rtctime &rArr; zigbee_timestamp_to_time &rArr; RTC_Get &rArr; Is_Leap_Year &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_timestamp_to_time
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[166]"></a>zigbee_test_result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, protocol.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>dp_download_handle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_data_point_handle
</UL>

<P><STRONG><a name="[e4]"></a>get_download_cmd_total</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dowmload_dpid_index
</UL>

<P><STRONG><a name="[d0]"></a>zigbee_work_state_event</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = zigbee_work_state_event &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Set_State
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[e7]"></a>mcu_reset_zigbee_event</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[d2]"></a>response_mcu_ota_version_event</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = response_mcu_ota_version_event &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_mcu_fw_ver
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[d4]"></a>response_mcu_ota_notify_event</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = response_mcu_ota_notify_event &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp_barry
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_mcu_fw_ver
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mcu_fw_pid
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[d7]"></a>reveived_mcu_ota_data_handle</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reveived_mcu_ota_data_handle &rArr; Flash_SectorErase
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_fw_data_handle
</UL>

<P><STRONG><a name="[d9]"></a>ota_fw_data_handle</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ota_fw_data_handle &rArr; mcu_ota_fw_request &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_ota_fw_request
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reveived_mcu_ota_data_handle
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_ota_fw_request_event
</UL>

<P><STRONG><a name="[dc]"></a>mcu_ota_fw_request_event</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mcu_ota_fw_request_event &rArr; ota_fw_data_handle &rArr; mcu_ota_fw_request &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_fw_data_handle
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mcu_ota_result
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memset
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[e8]"></a>mcu_ota_result_event</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[b8]"></a>set_zigbee_uart_byte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_ota_result_report
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_join_zigbee
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_exit_zigbee
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_ota_fw_request
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_mcu_ota_notify_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_mcu_ota_version_event
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_work_state_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mcu_ota_result
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_reset_zigbee
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_string_update
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_raw_update
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_fault_update
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bitmap_update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_network_start
</UL>

<P><STRONG><a name="[be]"></a>set_zigbee_uart_buffer</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = set_zigbee_uart_buffer &rArr; my_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_string_update
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_raw_update
</UL>

<P><STRONG><a name="[df]"></a>zigbee_uart_write_data</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
</UL>

<P><STRONG><a name="[c7]"></a>get_check_sum</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_service
</UL>

<P><STRONG><a name="[b9]"></a>zigbee_uart_write_frame</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seq_num_get
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_ota_result_report
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_system_time
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_zigbee_state
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_join_zigbee
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_exit_zigbee
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_ota_fw_request
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_mcu_ota_notify_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_mcu_ota_version_event
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_work_state_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mcu_ota_result
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_reset_zigbee
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_start_zigbee_test
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_string_update
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_raw_update
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_fault_update
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bitmap_update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_network_start
</UL>

<P><STRONG><a name="[da]"></a>mcu_ota_fw_request</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mcu_ota_fw_request &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_fw_data_handle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[c8]"></a>data_handle</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = data_handle &rArr; mcu_ota_fw_request_event &rArr; ota_fw_data_handle &rArr; mcu_ota_fw_request &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_data_point_handle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_ota_fw_request
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_ota_result_event
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_ota_fw_request_event
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_mcu_ota_notify_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_mcu_ota_version_event
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_reset_zigbee_event
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_work_state_event
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_write_rtctime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_service
</UL>

<P><STRONG><a name="[e9]"></a>mcu_exit_zigbee</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
</UL>

<P><STRONG><a name="[ea]"></a>mcu_join_zigbee</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
</UL>

<P><STRONG><a name="[eb]"></a>mcu_get_zigbee_state</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
</UL>

<P><STRONG><a name="[ec]"></a>mcu_get_system_time</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
</UL>

<P><STRONG><a name="[cf]"></a>zigbee_timestamp_to_time</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = zigbee_timestamp_to_time &rArr; RTC_Get &rArr; Is_Leap_Year &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_write_rtctime
</UL>

<P><STRONG><a name="[d5]"></a>current_mcu_fw_pid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_mcu_ota_notify_event
</UL>

<P><STRONG><a name="[f0]"></a>assic_to_hex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = assic_to_hex &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_mcu_fw_ver
</UL>

<P><STRONG><a name="[d3]"></a>get_current_mcu_fw_ver</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_current_mcu_fw_ver &rArr; assic_to_hex &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assic_to_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_mcu_ota_notify_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_mcu_ota_version_event
</UL>

<P><STRONG><a name="[f1]"></a>mcu_ota_result_report</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
</UL>

<P><STRONG><a name="[d6]"></a>strcmp_barry</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp_barry
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_mcu_ota_notify_event
</UL>

<P><STRONG><a name="[84]"></a>EnableNvic</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Timer0Cfg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Uart_PMCfg
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PORTA_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortA_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PORTB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTB_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PORTC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortC_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PORTD_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortD_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DMAC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMAC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dmac_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART1_IRQHandler &rArr; Uart1_IRQHandler &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPUART0_IRQHandler &rArr; LpUart0_IRQHandler &rArr; LPUart_DisableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi0_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPI1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>I2C0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c0_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>I2C1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM0_IRQHandler &rArr; Tim0_IRQHandler &rArr; mcu_network_start &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPTIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpTim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim4_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim5_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM6_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim6_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PCA_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pca_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WDT_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PCNT_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCNT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcnt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>VC0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VC0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc0_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>VC1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VC1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LVD_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LVD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lvd_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>LCD_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FLASH_RAM_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_RAM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ram_IRQHandler (Weak Reference)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CLKTRIM_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLKTRIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkTrim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, system_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HidePinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; $Super$$main &rArr; zigbee_uart_service &rArr; data_handle &rArr; mcu_ota_fw_request_event &rArr; ota_fw_data_handle &rArr; mcu_ota_fw_request &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[167]"></a>Log2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ddl.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>ddl_memclr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ddl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_I2cCfg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUart_PrintInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartPortInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init_STmode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Timer0Cfg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Uart_PMCfg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PM_PortInit
</UL>

<P><STRONG><a name="[168]"></a>DDL_WAIT_LOOP_HOOK</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ddl.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>Debug_UartInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ddl.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>Debug_Output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ddl.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ddl.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ddl.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__backspace</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ddl.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>delay1ms</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ddl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay1ms &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humiture_Single_Shot
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789V_Init
</UL>

<P><STRONG><a name="[115]"></a>delay100us</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ddl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[77]"></a>delay10us</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ddl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay10us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humiture_Single_Shot
</UL>

<P><STRONG><a name="[116]"></a>SetBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ddl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_DisableIrq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_EnableIrq
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAnalogMode
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_WriteOutputIO
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DisableIrq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetFunc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFunc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableIrq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_DisableIrq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_DisableFunc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableFunc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DisableFunc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetFunc
</UL>

<P><STRONG><a name="[117]"></a>GetBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ddl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIrqStatus
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ReadOutputIO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_GetStatus
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPeripheralGate
</UL>

<P><STRONG><a name="[5b]"></a>Gpio_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_I2cPortInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUart_PrintInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartPortInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init_STmode
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PM_PortInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc09_io_init
</UL>

<P><STRONG><a name="[2e]"></a>Gpio_GetInputIO</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gpio_GetInputIO
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
</UL>

<P><STRONG><a name="[16e]"></a>Gpio_GetInputData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>Gpio_WriteOutputIO</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>

<P><STRONG><a name="[119]"></a>Gpio_ReadOutputIO</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>

<P><STRONG><a name="[16f]"></a>Gpio_SetPort</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>Gpio_SetIO</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init_STmode
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789V_Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
</UL>

<P><STRONG><a name="[170]"></a>Gpio_ClrPort</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>Gpio_ClrIO</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_ClrIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init_STmode
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789V_Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
</UL>

<P><STRONG><a name="[3e]"></a>Gpio_SetClrPort</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAOUT
</UL>

<P><STRONG><a name="[11a]"></a>Gpio_SetAnalogMode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>

<P><STRONG><a name="[7e]"></a>Gpio_SetAfMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gpio_SetAfMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_I2cPortInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUart_PrintInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartPortInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PM_PortInit
</UL>

<P><STRONG><a name="[11b]"></a>Gpio_EnableIrq</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>

<P><STRONG><a name="[11c]"></a>Gpio_DisableIrq</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>

<P><STRONG><a name="[11d]"></a>Gpio_GetIrqStatus</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>

<P><STRONG><a name="[11e]"></a>Gpio_ClearIrq</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>

<P><STRONG><a name="[171]"></a>Gpio_SfIrqModeCfg</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>Gpio_SfIrPolCfg</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>Gpio_SfHClkOutputCfg</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>Gpio_SfPClkOutputCfg</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>Gpio_SfExtClkCfg</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>Gpio_SfSsnCfg</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>Gpio_SfTimGCfg</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>Gpio_SfTimEConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>Gpio_SfTimCCfg</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>Gpio_SfPcaCfg</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>I2C_SetBaud</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[aa]"></a>I2C_SetFunc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadData
</UL>

<P><STRONG><a name="[ae]"></a>I2C_ClearFunc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadData
</UL>

<P><STRONG><a name="[ab]"></a>I2C_GetIrq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadData
</UL>

<P><STRONG><a name="[b1]"></a>I2C_ClearIrq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadData
</UL>

<P><STRONG><a name="[ac]"></a>I2C_GetState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadData
</UL>

<P><STRONG><a name="[af]"></a>I2C_WriteByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadData
</UL>

<P><STRONG><a name="[b0]"></a>I2C_ReadByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadData
</UL>

<P><STRONG><a name="[a8]"></a>I2C_Init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetBaud
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetFunc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_I2cCfg
</UL>

<P><STRONG><a name="[120]"></a>Sysctrl_ClkSourceEnable</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, sysctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkDeInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[126]"></a>Sysctrl_XTHDriverCfg</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sysctrl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[129]"></a>Sysctrl_XTLDriverCfg</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, sysctrl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[127]"></a>Sysctrl_SetXTHStableTime</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[128]"></a>Sysctrl_SetRCLStableTime</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sysctrl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[12a]"></a>Sysctrl_SetXTLStableTime</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[12b]"></a>Sysctrl_SetPLLStableTime</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sysctrl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[9f]"></a>Sysctrl_SysClkSwitch</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkDeInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_SetRchTrim
</UL>

<P><STRONG><a name="[113]"></a>Sysctrl_GetHClkFreq</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
</UL>

<P><STRONG><a name="[80]"></a>Sysctrl_GetPClkFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_I2cCfg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUart_PrintInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Uart_PMCfg
</UL>

<P><STRONG><a name="[123]"></a>Sysctrl_SetPCLKDiv</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sysctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkDeInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[124]"></a>Sysctrl_SetHCLKDiv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sysctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkDeInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[125]"></a>Sysctrl_ClkInit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sysctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetHCLKDiv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPCLKDiv
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPLLStableTime
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTLStableTime
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCLStableTime
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTHStableTime
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_XTLDriverCfg
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_XTHDriverCfg
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[9e]"></a>Sysctrl_SetRCHTrim</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sysctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkDeInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_SetRchTrim
</UL>

<P><STRONG><a name="[12c]"></a>Sysctrl_ClkDeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sysctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetHCLKDiv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPCLKDiv
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCHTrim
</UL>

<P><STRONG><a name="[17b]"></a>Sysctrl_SetXTHFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>Sysctrl_SetPLLFreq</STRONG> (Thumb, 258 bytes, Stack size 20 bytes, sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>Sysctrl_SetRCLTrim</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>Sysctrl_SetPeripheralGate</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_I2cCfg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_I2cPortInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUart_PrintInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartPortInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init_STmode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Timer0Cfg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WdtInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Uart_PMCfg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PM_PortInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc09_io_init
</UL>

<P><STRONG><a name="[12d]"></a>Sysctrl_GetPeripheralGate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sysctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>

<P><STRONG><a name="[12e]"></a>Sysctrl_SetFunc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sysctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>

<P><STRONG><a name="[12f]"></a>Sysctrl_SetRTCAdjustClkFreq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sysctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>

<P><STRONG><a name="[9a]"></a>Uart_EnableIrq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_EnableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
</UL>

<P><STRONG><a name="[9b]"></a>Uart_DisableIrq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_DisableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
</UL>

<P><STRONG><a name="[17e]"></a>Uart_SetMultiMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>Uart_SetTb8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>Uart_GetRb8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>Uart_SetSaddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>Uart_EnableFunc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[131]"></a>Uart_DisableFunc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>

<P><STRONG><a name="[182]"></a>Uart_GetIsr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>Uart_GetStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_IRQHandler
</UL>

<P><STRONG><a name="[183]"></a>Uart_ClrIsr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>Uart_ClrStatus</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
</UL>

<P><STRONG><a name="[cb]"></a>Uart_SendDataPoll</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_output
</UL>

<P><STRONG><a name="[184]"></a>Uart_SendDataIt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>Uart_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>Uart_Init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Uart_Init &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUart_PrintInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
</UL>

<P><STRONG><a name="[83]"></a>LPUart_EnableIrq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_EnableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Receive_Data_Handler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Uart_PMCfg
</UL>

<P><STRONG><a name="[8a]"></a>LPUart_DisableIrq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_DisableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart0_IRQHandler
</UL>

<P><STRONG><a name="[185]"></a>LPUart_SelSclk</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lpuart.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>LPUart_SetMultiMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpuart.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>LPUart_SetTb8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lpuart.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>LPUart_GetRb8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpuart.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>LPUart_SetSaddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpuart.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>LPUart_EnableFunc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[137]"></a>LPUart_DisableFunc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>

<P><STRONG><a name="[18a]"></a>LPUart_GetIsr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpuart.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>LPUart_GetStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lpuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUart_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart0_IRQHandler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SendData
</UL>

<P><STRONG><a name="[18b]"></a>LPUart_ClrIsr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpuart.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>LPUart_ClrStatus</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart0_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Uart_PMCfg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SendData
</UL>

<P><STRONG><a name="[138]"></a>LPUart_SendData</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_GetStatus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
</UL>

<P><STRONG><a name="[18c]"></a>LPUart_SendDataIt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpuart.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>LPUart_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpuart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart0_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>LPUart_Init</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, lpuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LPUart_Init &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableFunc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Uart_PMCfg
</UL>

<P><STRONG><a name="[92]"></a>Bt_GetIntFlag</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bt_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>Bt_ClearIntFlag</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Timer0Cfg
</UL>

<P><STRONG><a name="[18d]"></a>Bt_ClearAllIntFlag</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>Bt_Mode0_EnableIrq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_Mode0_EnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Timer0Cfg
</UL>

<P><STRONG><a name="[18e]"></a>Bt_Mode0_DisableIrq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>Bt_Mode1_EnableIrq</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>Bt_Mode1_DisableIrq</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>Bt_Mode23_EnableIrq</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>Bt_Mode23_DisableIrq</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>Bt_Mode0_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bt_Mode0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Timer0Cfg
</UL>

<P><STRONG><a name="[a1]"></a>Bt_M0_Run</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_M0_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[193]"></a>Bt_M0_Stop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>Bt_M0_EnTOG_Output</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>Bt_M0_Enable_Output</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>Bt_M0_Cnt16Set</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_M0_Cnt16Set
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Timer0Cfg
</UL>

<P><STRONG><a name="[196]"></a>Bt_M0_Cnt16Get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>Bt_M0_ARRSet</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_M0_ARRSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Timer0Cfg
</UL>

<P><STRONG><a name="[197]"></a>Bt_M0_Cnt32Set</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>Bt_M0_Cnt32Get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>Bt_Mode1_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>Bt_M1_Input_Cfg</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>Bt_M1_PWC_Edge_Sel</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>Bt_M1_Run</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>Bt_M1_Stop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>Bt_M1_Cnt16Set</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>Bt_M1_Cnt16Get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>Bt_M1_PWC_CapValueGet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>Bt_Mode23_Init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>Bt_M23_EnPWM_Output</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>Bt_M23_Run</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>Bt_M23_Stop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>Bt_M23_ARRSet</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>Bt_M23_Cnt16Set</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>Bt_M23_Cnt16Get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>Bt_M23_CCR_Set</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>Bt_M23_CCR_Get</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>Bt_M23_GateFuncSel</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>Bt_M23_MasterSlave_Set</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>Bt_M23_PortOutput_Cfg</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>Bt_M23_PortInput_Cfg</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>Bt_M23_ETRInput_Cfg</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>Bt_M23_BrakeInput_Cfg</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>Bt_M23_TrigADC_Cfg</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>Bt_M23_DT_Cfg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>Bt_M23_SetValidPeriod</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>Bt_M23_OCRefClr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>Bt_M23_EnDMA</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>Bt_M23_EnSwTrigCapCmpA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>Bt_M23_EnSwTrigCapCmpB</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>Bt_M23_EnSwUev</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>Bt_M23_EnSwTrig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>Bt_M23_EnSwBk</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>Flash_GetIntFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>Flash_ClearIntFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>Flash_EnableIrq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>Flash_DisableIrq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>Flash_Init</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[13c]"></a>Flash_LockAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCFlash_WriteByte
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCFlash_Write_Word
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ChipErase
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteWord
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteHalfWord
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteByte
</UL>

<P><STRONG><a name="[13b]"></a>Flash_UnlockAll</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCFlash_WriteByte
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCFlash_Write_Word
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ChipErase
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteWord
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteHalfWord
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteByte
</UL>

<P><STRONG><a name="[13a]"></a>Flash_WriteByte</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnlockAll
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockAll
</UL>

<P><STRONG><a name="[13d]"></a>Flash_WriteHalfWord</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnlockAll
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockAll
</UL>

<P><STRONG><a name="[13e]"></a>Flash_WriteWord</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnlockAll
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockAll
</UL>

<P><STRONG><a name="[d8]"></a>Flash_SectorErase</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_SectorErase
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnlockAll
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockAll
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reveived_mcu_ota_data_handle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCFlash_Write_Word
</UL>

<P><STRONG><a name="[13f]"></a>Flash_ChipErase</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnlockAll
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockAll
</UL>

<P><STRONG><a name="[1be]"></a>Flash_WaitCycle</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>Flash_LockSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>HCFLASH_ReadWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCFLASH_Read
</UL>

<P><STRONG><a name="[140]"></a>HCFlash_Write_Word</STRONG> (Thumb, 210 bytes, Stack size 28 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnlockAll
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockAll
</UL>

<P><STRONG><a name="[141]"></a>HCFLASH_Read</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCFLASH_ReadWord
</UL>

<P><STRONG><a name="[143]"></a>HCFlash_WriteByte</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnlockAll
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockAll
</UL>

<P><STRONG><a name="[144]"></a>Wdt_WriteWdtLoad</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wdt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Init
</UL>

<P><STRONG><a name="[95]"></a>Wdt_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, wdt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_WriteWdtLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WdtInit
</UL>

<P><STRONG><a name="[1c0]"></a>Wdt_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wdt.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>Wdt_Feed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wdt.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>Wdt_IrqClr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wdt.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>Wdt_ReadWdtValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wdt.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>Wdt_ReadwdtStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wdt.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>Wdt_GetIrqStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wdt.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay100us
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assic_to_hex
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT30_Read
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Show_Handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemAndHum_Show_Handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Show_Handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_Show_Handler
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>

<P><STRONG><a name="[1c9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_ota_fw_request_event
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1cd]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[148]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ce]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1cf]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1d0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d1]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[4d]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Receive_Data_Handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_ReadBytes
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_CRC
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO2_Show_Handler
</UL>

<P><STRONG><a name="[ad]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadData
</UL>

<P><STRONG><a name="[1d2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1d3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1d4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[40]"></a>LCD_write_english</STRONG> (Thumb, 98 bytes, Stack size 44 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteOneDot
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_english_string
</UL>

<P><STRONG><a name="[79]"></a>Hum_CRC_Check</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, sc09.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Hum_CRC_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT30_Read
</UL>

<P><STRONG><a name="[94]"></a>App_WdtInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
</UL>

<P><STRONG><a name="[db]"></a>report_mcu_ota_result</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = report_mcu_ota_result &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_ota_fw_request_event
</UL>

<P><STRONG><a name="[e0]"></a>seq_num_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
</UL>

<P><STRONG><a name="[e1]"></a>product_info_update</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = product_info_update &rArr; zigbee_uart_write_frame &rArr; zigbee_uart_write_data &rArr; uart_transmit_output &rArr; Uart_SendDataPoll &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_uart_write_frame
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_byte
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zigbee_uart_buffer
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[e3]"></a>get_dowmload_dpid_index</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_dowmload_dpid_index
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_download_cmd_total
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_data_point_handle
</UL>

<P><STRONG><a name="[e5]"></a>zigbee_data_point_handle</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = zigbee_data_point_handle &rArr; get_dowmload_dpid_index
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dowmload_dpid_index
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[ed]"></a>Is_Leap_Year</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Is_Leap_Year &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[ef]"></a>RTC_Get</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_Get &rArr; Is_Leap_Year &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbee_timestamp_to_time
</UL>

<P><STRONG><a name="[f2]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>

<P><STRONG><a name="[114]"></a>_HidePinInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_hc32l13x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[121]"></a>_SysctrlUnlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetHCLKDiv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPCLKDiv
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRTCAdjustClkFreq
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetFunc
</UL>

<P><STRONG><a name="[151]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[153]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[152]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[109]"></a>Adc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>ClkTrim_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKTRIM_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>Dmac_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAC_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>Flash_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_RAM_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>I2c0_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>I2c1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>Lcd_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>LpTim_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>LpUart1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>Lvd_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVD_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>Pca_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>Pcnt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCNT_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>PortA_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>PortB_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTB_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>PortC_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>PortD_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>Ram_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_RAM_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>Rtc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>Spi0_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>Spi1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>SysTick_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[100]"></a>Tim1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>Tim2_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>Tim3_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>Tim4_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>Tim5_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>Tim6_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>Uart0_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>Vc0_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VC0_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>Vc1_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VC1_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>Wdt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>
<HR></body></html>
