#ifndef __LCD1_H
#define __LCD1_H


#include "stdint.h"
#include "gpio.h"
#include "airbox.h"
#include "zigbee.h"

//LCD重要参数集
typedef struct  
{										    
	uint16_t width;			//LCD 宽度
	uint16_t height;			//LCD 高度
	uint16_t id;				//LCD ID
	uint8_t  dir;			//横屏还是竖屏控制：0，竖屏；1，横屏。	
	uint16_t	wramcmd;		//开始写gram指令
	uint16_t setxcmd;		//设置x坐标指令
	uint16_t  setycmd;		//设置y坐标指令	 
}_lcd_dev; 	  

#define  PM2_LOGO             0
#define  CO2_LOGO             1
#define  PM_NORMAL_LOGO       2                   
#define  PM_LIGHT_POLLUTION   3
#define  PM_HEAVY_POLLUTION   4
#define  AIR_FRESH            5
#define  AIR_POLLUTION        6
#define  TEM_LOGO             7
#define  HUM_LOGO             8
#define  DEG_LOGO             9
#define  PERC_LOGO            10

typedef struct {
	const unsigned char * image_p;
	uint8_t height;
	//uint8_t weight;
	uint16_t size;
}image_t;



//LCD参数
//extern _lcd_dev lcddev;	//管理LCD重要参数
//LCD的画笔颜色和背景色	   
//extern uint16_t  POINT_COLOR;//默认红色    
//extern uint16_t  BACK_COLOR; //背景颜色.默认为白色
////////////////////////////////////////////////////////////////////
//-----------------LCD端口定义---------------- 
//#define LCD_LED_ON      Gpio_SetIO(GpioPortB,GpioPin5)          //LCD背光开
//#define LCD_LED_OFF     Gpio_ClrIO(GpioPortB,GpioPin5)          //LCD背光关

//#define	LCD_CS_SET  Gpio_SetIO(GpioPortB,GpioPin15)          //片选端口置1   PB15
//#define	LCD_RS_SET	Gpio_SetIO(GpioPortC,GpioPin6)          //数据/命令 		PC6	   
//#define	LCD_WR_SET	Gpio_SetIO(GpioPortC,GpioPin7)          //写置高			  PC7
//#define	LCD_RD_SET	Gpio_SetIO(GpioPortC,GpioPin8)          //读置高			  PC8

//#define	LCD_CS_CLR  Gpio_ClrIO(GpioPortB,GpioPin15)          //片选端口置0   PB15
//#define	LCD_RS_CLR	Gpio_ClrIO(GpioPortC,GpioPin6)          //数据/命令 		PC6	   
//#define	LCD_WR_CLR	Gpio_ClrIO(GpioPortC,GpioPin7)          //写置低			  PC7
//#define	LCD_RD_CLR	Gpio_ClrIO(GpioPortC,GpioPin8)          //读置低			  PC8

//#define LCD_RSEST_SET Gpio_SetIO(GpioPortB,GpioPin13)       // RESET
//#define LCD_RSEST_CLR Gpio_ClrIO(GpioPortB,GpioPin13)       // RESET


#define LCD_LED_ON   M0P_GPIO->PBOUT_f.PB05 = 1              //LCD背光开
#define LCD_LED_OFF  M0P_GPIO->PBOUT_f.PB05 = 0              //LCD背光关

#define	LCD_CS_SET  M0P_GPIO->PBOUT_f.PB15 = 1          //片选端口置1   PB15
#define	LCD_RS_SET	M0P_GPIO->PCOUT_f.PC06 = 1          //数据/命令 		PC6	   
#define	LCD_WR_SET	M0P_GPIO->PCOUT_f.PC07 = 1          //写置高			  PC7
#define	LCD_RD_SET	M0P_GPIO->PCOUT_f.PC08 = 1          //读置高			  PC8

#define	LCD_CS_CLR  M0P_GPIO->PBOUT_f.PB15 = 0          //片选端口置0   PB15
#define	LCD_RS_CLR	M0P_GPIO->PCOUT_f.PC06 = 0          //数据/命令 		PC6	   
#define	LCD_WR_CLR	M0P_GPIO->PCOUT_f.PC07 = 0          //写置低			  PC7
#define	LCD_RD_CLR	M0P_GPIO->PCOUT_f.PC08 = 0          //读置低			  PC8

#define LCD_RSEST_SET M0P_GPIO->PBOUT_f.PB13 = 1      // RESET
#define LCD_RSEST_CLR M0P_GPIO->PBOUT_f.PB13 = 0       // RESET



//PC0~7,作为数据线
/*#define DATAOUT(x)\
        {y = y&0x00000000;\
				z = x;\
        y = y|(x<<16);\
				y = y|((~z)&0xff);\
				Gpio_SetClrPort(GpioPortC,y);}*/          // 数据输出
				
//#define DATAIN     Gpio_GetInputData(GpioPortC)   //数据输入    只需要低八位 在lcd.C中再去操作





//////////////////////////////////////////////////////////////////////
//扫描方向定义
#define L2R_U2D  0 //从左到右,从上到下
#define L2R_D2U  1 //从左到右,从下到上
#define R2L_U2D  2 //从右到左,从上到下
#define R2L_D2U  3 //从右到左,从下到上

#define U2D_L2R  4 //从上到下,从左到右
#define U2D_R2L  5 //从上到下,从右到左
#define D2U_L2R  6 //从下到上,从左到右
#define D2U_R2L  7 //从下到上,从右到左

#define DFT_SCAN_DIR  L2R_U2D  //默认的扫描方向
	 
//扫描方向定义
#define L2R_U2D  0 //从左到右,从上到下
#define L2R_D2U  1 //从左到右,从下到上
#define R2L_U2D  2 //从右到左,从上到下
#define R2L_D2U  3 //从右到左,从下到上

#define U2D_L2R  4 //从上到下,从左到右
#define U2D_R2L  5 //从上到下,从右到左
#define D2U_L2R  6 //从下到上,从左到右
#define D2U_R2L  7 //从下到上,从右到左	 

#define DFT_SCAN_DIR  L2R_U2D  //默认的扫描方向

//画笔颜色
#define WHITE         	 0xFFFF
#define BLACK         	 0x0000	  
#define BLUE         	 0x001F  
#define BRED             0XF81F
#define GRED 			 0XFFE0
#define GBLUE			 0X07FF
#define RED           	 0xF800
#define MAGENTA       	 0xF81F
#define GREEN         	 0x07E0
#define CYAN          	 0x7FFF
#define YELLOW        	 0xFFE0
#define BROWN 			 0XBC40 //棕色
#define BRRED 			 0XFC07 //棕红色
#define GRAY  			 0X8430 //灰色
//GUI颜色

#define DARKBLUE      	 0X01CF	//深蓝色
#define LIGHTBLUE      	 0X7D7C	//浅蓝色  
#define GRAYBLUE       	 0X5458 //灰蓝色
//以上三色为PANEL的颜色 
 
#define LIGHTGREEN     	 0X841F //浅绿色 
#define LGRAY 			 0XC618 //浅灰色(PANNEL),窗体背景色

#define LGRAYBLUE        0XA651 //浅灰蓝色(中间层颜色)
#define LBBLUE           0X2B12 //浅棕蓝色(选择条目的反色)

#define WORDCOLOR       0xFFFF     //字体颜色
#define BACKCOLOR       0x0000     //背景颜色

void LCD_Init(void);													   	//初始化
void LCD_DisplayOn(void);													//开显示
void LCD_DisplayOff(void);													//关显示
void LCD_Clear(uint16_t Color);	 												//清屏
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos);										//设置光标
void LCD_DrawPoint(uint16_t x,uint16_t y);											//画点
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint16_t color);								//快速画点
uint16_t  LCD_ReadPoint(uint16_t x,uint16_t y); 											//读点 
void LCD_Draw_Circle(uint16_t x0,uint16_t y0,uint8_t r);					    			//画圆
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);							//画线
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);		   				//画矩形
void LCD_Fill(uint16_t sx,uint16_t sy,uint16_t ex,uint16_t ey,uint16_t color);		   				//填充单色
void LCD_Color_Fill(uint16_t sx,uint16_t sy,uint16_t ex,uint16_t ey,uint16_t *color);				//填充指定颜色
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode);						//显示一个字符
void LCD_ShowNum(uint16_t x,uint16_t y,uint32_t num,uint8_t len,uint8_t size);  						//显示一个数字
void LCD_ShowxNum(uint16_t x,uint16_t y,uint32_t num,uint8_t len,uint8_t size,uint8_t mode);				//显示 数字
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t p);		//显示一个字符串,12/16字体

void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue);
uint16_t LCD_ReadReg(uint8_t LCD_Reg);
void LCD_WriteRAM_Prepare(void);
void LCD_WriteRAM(uint8_t RGB_Code);		  
void LCD_Scan_Dir(uint8_t dir);									//设置屏扫描方向
void LCD_Display_Dir(uint8_t dir);								//设置屏幕显示方向
void LCD_Set_Window(uint16_t sx,uint16_t sy,uint16_t width,uint16_t height);	//设置窗口
void ST7789V_Init(void);
void LCD_Draw_Point(uint16_t x,uint16_t y,uint16_t color);
void LCD_WriteOneDot(uint16_t color);                   //写一个点
void Lcd_SetBox(uint16_t xStart,uint16_t yStart,uint16_t xlong,uint16_t ylong); //选定Lcd上指定的矩形区域
void LCD_Clear(uint16_t Color);    //清屏幕
uint16_t LCD_RD_DATA(void);
void DATAOUT(uint8_t x);
void getLCDID(void);
static void LCD_write_english(uint8_t data,uint16_t color,uint16_t xcolor ,uint8_t mode);    //写字符
void LCD_Picture(uint16_t x,uint16_t y,uint16_t width,uint16_t height);        //写图片
void LCD_write_english_string(uint16_t x, uint16_t y, char *str,uint8_t mode);  //英文字符串
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode);

void LCD_TEST(uint8_t x,uint8_t y,uint8_t mode);
void LCD_ShowChar_CH(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode);        //写一个汉字
void LCD_rectangle(uint16_t xStart,uint16_t yStart,uint16_t xlong,uint16_t ylong);        //写一块区域
void LCD_ShowPM(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode,uint16_t csize);             //显示PM2.5
void LCD_ShowNUM(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode,uint16_t csize);
void Clear_Part(uint16_t x,uint8_t y,uint16_t weight,uint8_t height,uint16_t Color);      //填充某一块区域


void LCD_ShowPicture(uint16_t x,uint16_t y,uint8_t mode,image_t *image);       


void CO2_Show_Handler(void);
void PM_Show_Handler(void);
void TemAndHum_Show_Handler(void);
void RTC_Show_Handler(void);                                            //画日期

void Net_Handler(void);

//LCD分辨率设置
#define SSD_HOR_RESOLUTION		800		//LCD水平分辨率
#define SSD_VER_RESOLUTION		480		//LCD垂直分辨率
//LCD驱动参数设置
#define SSD_HOR_PULSE_WIDTH		1		//水平脉宽
#define SSD_HOR_BACK_PORCH		46		//水平前廊
#define SSD_HOR_FRONT_PORCH		210		//水平后廊

#define SSD_VER_PULSE_WIDTH		1		//垂直脉宽
#define SSD_VER_BACK_PORCH		23		//垂直前廊
#define SSD_VER_FRONT_PORCH		22		//垂直前廊
//如下几个参数，自动计算
#define SSD_HT	(SSD_HOR_RESOLUTION+SSD_HOR_BACK_PORCH+SSD_HOR_FRONT_PORCH)
#define SSD_HPS	(SSD_HOR_BACK_PORCH)
#define SSD_VT 	(SSD_VER_RESOLUTION+SSD_VER_BACK_PORCH+SSD_VER_FRONT_PORCH)
#define SSD_VPS (SSD_VER_BACK_PORCH)

 

#endif
